name: AWS Infrastructure GitFlow Pipeline

on:
  push:
    branches:
      - dev
      - main
      - 'cleanup/*'   # auto-destroy when cleanup branches are pushed

env:
  TF_INPUT: false
  TERRAGRUNT_TFPATH: terraform
  AWS_REGION: us-east-2
  TF_VERSION: 1.13.3

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.set-env.outputs.env-name }}
      is-cleanup: ${{ steps.set-env.outputs.is-cleanup }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "env-name=prod" >> $GITHUB_OUTPUT
            echo "is-cleanup=false" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "env-name=dev" >> $GITHUB_OUTPUT
            echo "is-cleanup=false" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == cleanup-* ]]; then
            echo "env-name=cleanup" >> $GITHUB_OUTPUT
            echo "is-cleanup=true" >> $GITHUB_OUTPUT
          else
            echo "env-name=unknown" >> $GITHUB_OUTPUT
            echo "is-cleanup=false" >> $GITHUB_OUTPUT
          fi
          echo "Branch: $BRANCH"
          echo "Environment: $(cat $GITHUB_OUTPUT | grep env-name | cut -d'=' -f2)"

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.env-name != 'unknown'
    environment: ${{ needs.setup.outputs.env-name == 'prod' && 'prod' || needs.setup.outputs.env-name == 'dev' && 'dev' || '' }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set AWS credentials env
        run: |
          ENV="${{ needs.setup.outputs.env-name }}"
          if [[ "$ENV" == "prod" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY_PROD }}" >> $GITHUB_ENV
          else
            # dev or cleanup uses dev secrets
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY_DEV }}" >> $GITHUB_ENV
          fi

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.57.5/terragrunt_linux_amd64 -o terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Deploy / Destroy Infrastructure
        working-directory: live
        run: |
          ENV="${{ needs.setup.outputs.env-name }}"
          IS_CLEANUP="${{ needs.setup.outputs.is-cleanup }}"

          if [[ "$IS_CLEANUP" == "true" ]]; then
            echo "üßπ Running destroy for cleanup branch..."
            BRANCH_NAME="${GITHUB_REF##*/}"
            CLEAN_ENV=$(echo "$BRANCH_NAME" | sed 's/cleanup-//' | cut -d'-' -f1)
            echo "Cleaning environment: $CLEAN_ENV"

            if [[ -d "$CLEAN_ENV" ]]; then
              cd "$CLEAN_ENV" || exit 1
              terragrunt run -- run-all destroy --auto-approve --terragrunt-non-interactive
            else
              echo "‚ùå Environment directory '$CLEAN_ENV' not found!"
              exit 1
            fi
          else
            echo "üöÄ Deploying environment: $ENV"
            if [[ -d "$ENV" ]]; then
              cd "$ENV" || exit 1
              terragrunt run -- run-all apply --auto-approve --terragrunt-non-interactive
            else
              echo "‚ùå Environment directory '$ENV' not found!"
              exit 1
            fi
          fi

      - name: Validate Deployment
        if: needs.setup.outputs.is-cleanup != 'true'
        working-directory: live
        run: |
          ENV="${{ needs.setup.outputs.env-name }}"
          cd "$ENV"
          terragrunt run -- run-all validate

